/* Copyright (c) 2025 Rick (rick 'at' gibbed 'dot' us)
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would
 *    be appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and must not
 *    be misrepresented as being the original software.
 *
 * 3. This notice may not be removed or altered from any source
 *    distribution.
 */

using System;

namespace Gibbed.IvaliceChronicles.ScriptFormats
{
    public static class OpcodeHelpers
    {
        public static int GetClassicSize(this Opcode opcode) => opcode switch
        {
            Opcode.Unknown00 => 0,
            Opcode.Unknown01 => 0,
            Opcode.Unknown02 => 0,
            Opcode.Unknown03 => 0,
            Opcode.Unknown04 => 0,
            Opcode.Unknown05 => 0,
            Opcode.Unknown06 => 0,
            Opcode.Unknown07 => 0,
            Opcode.Unknown08 => 0,
            Opcode.Unknown09 => 0,
            Opcode.Unknown0A => 0,
            Opcode.Unknown0B => 0,
            Opcode.Unknown0C => 0,
            Opcode.Unknown0D => 0,
            Opcode.Unknown0E => 0,
            Opcode.Unknown0F => 0,
            Opcode.DisplayMessage => 14,
            Opcode.UnitAnim => 5,
            Opcode.Unknown12 => 2,
            Opcode.ChangeMapBeta => 2,
            Opcode.Unknown14 => 2,
            Opcode.Unknown15 => 0,
            Opcode.Pause => 0,
            Opcode.Unknown17 => 5,
            Opcode.Effect => 6,
            Opcode.Camera => 16,
            Opcode.MapDarkness => 5,
            Opcode.MapLight => 14,
            Opcode.EventSpeed => 1,
            Opcode.CameraFusionStart => 0,
            Opcode.CameraFusionEnd => 0,
            Opcode.Focus => 5,
            Opcode.SoundEffect => 6,
            Opcode.SwitchTrack => 2,
            Opcode.Unknown22 => 3,
            Opcode.Unknown23 => 3,
            Opcode.Unknown24 => 0,
            Opcode.Unknown25 => 4,
            Opcode.Unknown26 => 2,
            Opcode.ReloadMapState => 0,
            Opcode.WalkTo => 8,
            Opcode.WaitWalk => 2,
            Opcode.BlockStart => 0,
            Opcode.BlockEnd => 0,
            Opcode.FaceUnit2 => 7,
            Opcode.RotateUnit => 6,
            Opcode.Background => 8,
            Opcode.Unknown2F => 0,
            Opcode.Unknown30 => 0,
            Opcode.ColorBGBeta => 5,
            Opcode.ColorUnit => 7,
            Opcode.ColorField => 5,
            Opcode.Unknown34 => 2,
            Opcode.Unknown35 => 4,
            Opcode.Unknown36 => 2,
            Opcode.Unknown37 => 2,
            Opcode.FocusSpeed => 2,
            Opcode.Unknown39 => 0,
            Opcode.Unknown3A => 0,
            Opcode.SpriteMove => 12,
            Opcode.Weather => 2,
            Opcode.RemoveUnit => 2,
            Opcode.ColorScreen => 9,
            Opcode.Unknown3F => 4,
            Opcode.Unknown40 => 5,
            Opcode.EarthquakeStart => 4,
            Opcode.EarthquakeEnd => 0,
            Opcode.CallFunction => 1,
            Opcode.Draw => 2,
            Opcode.AddUnit => 3,
            Opcode.Erase => 2,
            Opcode.AddGhostUnit => 8,
            Opcode.WaitAddUnit => 0,
            Opcode.AddUnitStart => 0,
            Opcode.AddUnitEnd => 0,
            Opcode.WaitAddUnitEnd => 0,
            Opcode.ChangeMap => 2,
            Opcode.Reveal => 1,
            Opcode.UnitShadow => 3,
            Opcode.SetDaytime => 1,
            Opcode.PortraitCol => 1,
            Opcode.ChangeDialog => 5,
            Opcode.Unknown52 => 2,
            Opcode.FaceUnit => 7,
            Opcode.Use3DObject => 2,
            Opcode.UseFieldObject => 2,
            Opcode.Wait3DObject => 0,
            Opcode.WaitFieldObject => 0,
            Opcode.LoadEVTCHR => 3,
            Opcode.SaveEVTCHR => 1,
            Opcode.SaveEVTCHRClear => 1,
            Opcode.LoadEVTCHRClear => 1,
            Opcode.Unknown5C => 3,
            Opcode.Unknown5D => 1,
            Opcode.EndTrack => 1,
            Opcode.WarpUnit => 6,
            Opcode.FadeSound => 2,
            Opcode.Unknown61 => 3,
            Opcode.Unknown62 => 6,
            Opcode.CameraSpeedCurve => 1,
            Opcode.WaitRotateUnit => 2,
            Opcode.WaitRotateAll => 0,
            Opcode.Unknown66 => 0,
            Opcode.Unknown67 => 2,
            Opcode.MirrorSprite => 3,
            Opcode.FaceTile => 8,
            Opcode.EditBGSound => 5,
            Opcode.BGSound => 5,
            Opcode.Unknown6C => 2,
            Opcode.Unknown6D => 2,
            Opcode.SpriteMoveBeta => 12,
            Opcode.WaitSpriteMove => 2,
            Opcode.Jump => 4,
            Opcode.Unknown71 => 2,
            Opcode.Unknown72 => 0,
            Opcode.Unknown73 => 14,
            Opcode.Unknown74 => 6,
            Opcode.Unknown75 => 6,
            Opcode.DarkScreen => 6,
            Opcode.RemoveDarkScreen => 0,
            Opcode.DisplayConditions => 2,
            Opcode.WalkToAnim => 4,
            Opcode.DismissUnit => 2,
            Opcode.Unknown7B => 2,
            Opcode.Unknown7C => 0,
            Opcode.ShowGraphic => 1,
            Opcode.WaitValue => 4,
            Opcode.EVTCHRPalette => 4,
            Opcode.March => 3,
            Opcode.Unknown81 => 3,
            Opcode.Unknown82 => 0,
            Opcode.ChangeStats => 5,
            Opcode.PlayTune => 1,
            Opcode.UnlockDate => 1,
            Opcode.TempWeapon => 3,
            Opcode.Arrow => 4,
            Opcode.MapUnfreeze => 0,
            Opcode.MapFreeze => 0,
            Opcode.EffectStart => 0,
            Opcode.EffectEnd => 0,
            Opcode.UnitAnimRotate => 6,
            Opcode.Unknown8D => 0,
            Opcode.WaitGraphicPrint => 0,
            Opcode.Unknown8F => 1,
            Opcode.Unknown90 => 3,
            Opcode.ShowMapTitle => 3,
            Opcode.InflictStatus => 5,
            Opcode.Unknown93 => 2,
            Opcode.TeleportOut => 2,
            Opcode.Unknown95 => 0,
            Opcode.AppendMapState => 0,
            Opcode.ResetPalette => 2,
            Opcode.TeleportIn => 2,
            Opcode.BlueRemoveUnit => 2,
            Opcode.Unknown9A => 0,
            Opcode.Unknown9B => 0,
            Opcode.Unknown9C => 0,
            Opcode.Unknown9D => 0,
            Opcode.Unknown9E => 0,
            Opcode.Unknown9F => 0,
            Opcode.LessThanEquals => 0,
            Opcode.GreaterThanEquals => 0,
            Opcode.Equals => 0,
            Opcode.NotEquals => 0,
            Opcode.LessThan => 0,
            Opcode.GreaterThan => 0,
            Opcode.UnknownA6 => 4,
            Opcode.UnknownA7 => 4,
            Opcode.UnknownA8 => 6,
            Opcode.UnknownA9 => 6,
            Opcode.UnknownAA => 1,
            Opcode.UnknownAB => 4,
            Opcode.UnknownAC => 4,
            Opcode.UnknownAD => 8,
            Opcode.UnknownAE => 8,
            Opcode.UnknownAF => 4,
            Opcode.Add => 4,
            Opcode.AddVar => 4,
            Opcode.Sub => 4,
            Opcode.SubVar => 4,
            Opcode.Mul => 4,
            Opcode.MulVar => 4,
            Opcode.Div => 4,
            Opcode.DivVar => 4,
            Opcode.Mod => 4,
            Opcode.ModVar => 4,
            Opcode.And => 4,
            Opcode.AndVar => 4,
            Opcode.Or => 4,
            Opcode.OrVar => 4,
            Opcode.Zero => 2,
            Opcode.UnknownBF => 0,
            Opcode.UnknownC0 => 16,
            Opcode.UnknownC1 => 0,
            Opcode.UnknownC2 => 4,
            Opcode.UnknownC3 => 2,
            Opcode.UnknownC4 => 12,
            Opcode.UnknownC5 => 8,
            Opcode.UnknownC6 => 8,
            Opcode.UnknownC7 => 16,
            Opcode.UnknownC8 => 8,
            Opcode.UnknownC9 => 1,
            Opcode.UnknownCA => 1,
            Opcode.UnknownCB => 8,
            Opcode.UnknownCC => 12,
            Opcode.UnknownCD => 8,
            Opcode.UnknownCE => 1,
            Opcode.UnknownCF => 0,
            Opcode.JumpForwardIfZero => 1,
            Opcode.JumpForward => 1,
            Opcode.ForwardTarget => 1,
            Opcode.JumpBack => 1,
            Opcode.UnknownD4 => 1,
            Opcode.BackTarget => 1,
            Opcode.UnknownD6 => 0,
            Opcode.UnknownD7 => 0,
            Opcode.UnknownD8 => 1,
            Opcode.UnknownD9 => 1,
            Opcode.UnknownDA => 0,
            Opcode.EventEnd => 0,
            Opcode.UnknownDC => 0,
            Opcode.UnknownDD => 0,
            Opcode.UnknownDE => 0,
            Opcode.UnknownDF => 0,
            Opcode.UnknownE0 => 2,
            Opcode.UnknownE1 => 1,
            Opcode.UnknownE2 => 1,
            Opcode.EventEnd2 => 0,
            Opcode.UnknownE4 => 1,
            Opcode.WaitForInstruction => 2,
            Opcode.UnknownE6 => 0,
            Opcode.UnknownE7 => 4,
            Opcode.UnknownE8 => 1,
            Opcode.UnknownE9 => 8,
            Opcode.UnknownEA => 5,
            Opcode.UnknownEB => 6,
            Opcode.UnknownEC => 0,
            Opcode.UnknownED => 6,
            Opcode.UnknownEE => 4,
            Opcode.UnknownEF => 0,
            Opcode.UnknownF0 => 0,
            Opcode.Wait => 2,
            Opcode.Pad => 0,
            _ => throw new ArgumentOutOfRangeException(nameof(opcode)),
        };

        public static int GetEnhancedSize(this Opcode opcode) => GetClassicSize(opcode) + GetEnhancedExtraSize(opcode);

        public static int GetEnhancedExtraSize(this Opcode opcode) => opcode switch
        {
            Opcode.DisplayMessage => 3,
            Opcode.ChangeDialog => 2,
            Opcode.UnknownEB => 5,
            _ => 0,
        };

        public static int GetSize(this Opcode opcode, bool isEnhanced) => isEnhanced == false
            ? opcode.GetClassicSize()
            : opcode.GetEnhancedSize();
    }
}
